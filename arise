local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Path to enemies folder
local ENEMIES_FOLDER = workspace.__Main.__Enemies.Client

-- Settings
local settings = {
    isRunning = false,
    teleportHeight = 3,
    attackDelay = 0.2,
    teleportMethod = "CFrame", -- "CFrame" or "Tween"
    targetSearchRadius = 100,
    useSmartTP = true,
    selectedEnemy = "Nearest", -- "Nearest", "Strongest", "Weakest", "Player"
    targetPlayer = nil, -- For player targeting
    autoArise = true, -- Auto arise after kill
    lastTarget = nil, -- Track last target for kill detection
    useScreenTap = true -- Use screen tap for attacking
}

-- Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create window
local Window = Rayfield:CreateWindow({
    Name = "Auza Hub",
    LoadingTitle = "Auza Hub - Advanced Combat Script",
    LoadingSubtitle = "by Auza Team",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AuzaHubConfig",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },
    KeySystem = false
})

-- Utility functions
local function notify(title, content, duration)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = duration or 3,
        Image = 4483362458
    })
end

-- Get unique ID for enemy
local function getEnemyID(enemy)
    if enemy and enemy:IsA("Model") then
        return enemy:GetAttribute("ID") or enemy.Name
    end
    return nil
end

-- Check if character is valid
local function isValidCharacter(char)
    return char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid")
end

-- Check if enemy is valid
local function isValidEnemy(enemy)
    return enemy and enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChild("Humanoid")
end

-- Enemy detection functions
local function findEnemies()
    local enemies = {}
    
    -- Check if the folder exists
    if not ENEMIES_FOLDER then
        warn("Enemy folder not found!")
        return enemies
    end
    
    -- Get all valid enemies from the folder
    for _, enemy in pairs(ENEMIES_FOLDER:GetChildren()) do
        if isValidEnemy(enemy) then
            table.insert(enemies, enemy)
        end
    end
    
    return enemies
end

local function findTargetEnemy()
    -- If targeting a player, prioritize that
    if settings.selectedEnemy == "Player" and settings.targetPlayer then
        local targetPlayer = Players:FindFirstChild(settings.targetPlayer)
        if targetPlayer and isValidCharacter(targetPlayer.Character) then
            return targetPlayer.Character
        end
    end
    
    local enemies = findEnemies()
    if #enemies == 0 then
        return nil
    end
    
    -- Different targeting methods
    if settings.selectedEnemy == "Nearest" then
        local nearestEnemy = nil
        local shortestDistance = settings.targetSearchRadius
        local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                              LocalPlayer.Character.HumanoidRootPart.Position
        
        if not playerPosition then return nil end
        
        for _, enemy in pairs(enemies) do
            local distance = (enemy.HumanoidRootPart.Position - playerPosition).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestEnemy = enemy
            end
        end
        
        return nearestEnemy
    elseif settings.selectedEnemy == "Strongest" then
        -- Sort by health (highest first)
        table.sort(enemies, function(a, b)
            return a.Humanoid.Health > b.Humanoid.Health
        end)
        
        return enemies[1]
    elseif settings.selectedEnemy == "Weakest" then
        -- Sort by health (lowest first)
        table.sort(enemies, function(a, b)
            return a.Humanoid.Health < b.Humanoid.Health
        end)
        
        return enemies[1]
    end
    
    -- Default to nearest if no valid selection
    return enemies[1]
end

-- Enhanced teleport function - Integrated from second script
function smartTeleport(targetCFrame)
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    
    if settings.teleportMethod == "CFrame" then
        -- Direct CFrame with randomization from the second script
        if settings.useSmartTP then
            -- Add slight randomization to teleport position
            local randomOffset = Vector3.new(
                math.random(-10, 10) / 100,
                settings.teleportHeight + (math.random(-10, 10) / 100),
                math.random(-10, 10) / 100
            )
            humanoidRootPart.CFrame = targetCFrame * CFrame.new(randomOffset)
        else
            -- Standard teleport
            humanoidRootPart.CFrame = targetCFrame * CFrame.new(0, settings.teleportHeight, 0)
        end
    else
        -- Tween method for smoother motion
        local tweenInfo = TweenInfo.new(
            0.2, -- Time
            Enum.EasingStyle.Linear,
            Enum.EasingDirection.Out
        )
        
        local targetPosition = targetCFrame * CFrame.new(0, settings.teleportHeight, 0)
        local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetPosition})
        tween:Play()
        wait(0.2) -- Wait for tween to complete
    end
end

-- Enhanced attack function with screen tap option
local function attackEnemy(enemy)
    local enemyID = getEnemyID(enemy)
    if not enemyID then return false end
    
    if settings.useScreenTap then
        -- Method 1: Mouse click (screen tap)
        mouse1click()
    else
        -- Method 2: Remote event
        ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer({
            {
                ["Event"] = "PunchAttack",
                ["Enemy"] = enemyID
            },
            ""
        })
    end
    
    return true
end

-- Auto arise function
local function performArise()
    for i = 1, 3 do
        -- Simulate pressing E key
        keypress(0x45) -- E key
        wait(0.1)
        keyrelease(0x45)
        wait(0.1)
    end
end

-- Check if target is dead
local function isTargetDead(target)
    if not target then return true end
    
    -- Check if the target has a valid humanoid and if it's dead
    if target:FindFirstChild("Humanoid") then
        return target.Humanoid.Health <= 0
    end
    
    -- If there's no Humanoid, check if the target still exists
    return not target:IsDescendantOf(game)
end

-- Main attack loop
local attackConnection = nil

local function startAttackLoop()
    if attackConnection then return end
    
    notify("Auza Hub", "Autofarm activated successfully!", 3)
    
    attackConnection = RunService.Heartbeat:Connect(function()
        if not settings.isRunning then return end
        
        local character = LocalPlayer.Character
        if not isValidCharacter(character) then return end
        
        -- Check if previous target is dead
        if settings.lastTarget and isTargetDead(settings.lastTarget) then
            if settings.autoArise then
                performArise()
            end
            settings.lastTarget = nil
            notify("Target Update", "Previous target eliminated. Finding new target...", 2)
            wait(0.5) -- Brief delay after kill
        end
        
        local enemy = findTargetEnemy()
        if enemy then
            -- Update last target
            settings.lastTarget = enemy
            
            -- Using the enhanced teleport method
            smartTeleport(enemy.HumanoidRootPart.CFrame)
            
            -- Attack with screen tap or remote
            attackEnemy(enemy)
            
            -- Wait for attack delay
            wait(settings.attackDelay)
        else
            -- No enemies found, wait a bit before checking again
            wait(0.2)
        end
    end)
end

local function stopAttackLoop()
    if attackConnection then
        attackConnection:Disconnect()
        attackConnection = nil
        notify("Auza Hub", "Autofarm deactivated.", 3)
    end
end

-- Create UI elements
local MainTab = Window:CreateTab("Main", 4483362458)

local ToggleButton = MainTab:CreateToggle({
    Name = "Enable Autofarm",
    CurrentValue = false,
    Flag = "AutofarmEnabled",
    Callback = function(Value)
        settings.isRunning = Value
        if Value then
            startAttackLoop()
        else
            stopAttackLoop()
        end
    end,
})

local TeleportMethodDropdown = MainTab:CreateDropdown({
    Name = "Teleport Method",
    Options = {"CFrame", "Tween"},
    CurrentOption = settings.teleportMethod,
    Flag = "TPMethod",
    Callback = function(Option)
        settings.teleportMethod = Option
        notify("Settings Changed", "Teleport method set to: " .. Option, 2)
    end,
})

local SmartTPToggle = MainTab:CreateToggle({
    Name = "Smart Teleport",
    CurrentValue = settings.useSmartTP,
    Flag = "SmartTP",
    Callback = function(Value)
        settings.useSmartTP = Value
    end,
})

local TargetingDropdown = MainTab:CreateDropdown({
    Name = "Target Selection",
    Options = {"Nearest", "Strongest", "Weakest", "Player"},
    CurrentOption = settings.selectedEnemy,
    Flag = "TargetSelection",
    Callback = function(Option)
        settings.selectedEnemy = Option
        notify("Settings Changed", "Target selection set to: " .. Option, 2)
    end,
})

-- Get player list for targeting
local function getPlayerNames()
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

local PlayerTargetDropdown = MainTab:CreateDropdown({
    Name = "Select Player Target",
    Options = getPlayerNames(),
    CurrentOption = "",
    Flag = "PlayerTarget",
    Callback = function(Option)
        settings.targetPlayer = Option
        notify("Target Selected", "Now targeting player: " .. Option, 2)
    end,
})

-- Refresh player list button
local RefreshPlayersButton = MainTab:CreateButton({
    Name = "Refresh Player List",
    Callback = function()
        PlayerTargetDropdown:Refresh(getPlayerNames(), true)
        notify("Players Refreshed", "Player list has been updated.", 2)
    end,
})

-- Combat Tab
local CombatTab = Window:CreateTab("Combat", 4483362458)

local AttackMethodToggle = CombatTab:CreateToggle({
    Name = "Use Screen Tap for Attack",
    CurrentValue = settings.useScreenTap,
    Flag = "ScreenTap",
    Callback = function(Value)
        settings.useScreenTap = Value
        notify("Attack Method", "Now using " .. (Value and "screen tap" or "remote event") .. " for attacks", 2)
    end,
})

local AttackDelaySlider = CombatTab:CreateSlider({
    Name = "Attack Delay",
    Range = {0.1, 1.0},
    Increment = 0.05,
    Suffix = "seconds",
    CurrentValue = settings.attackDelay,
    Flag = "AttackDelay",
    Callback = function(Value)
        settings.attackDelay = Value
    end,
})

local AutoAriseToggle = CombatTab:CreateToggle({
    Name = "Auto Arise After Kill",
    CurrentValue = settings.autoArise,
    Flag = "AutoArise",
    Callback = function(Value)
        settings.autoArise = Value
    end,
})

local ManualAriseButton = CombatTab:CreateButton({
    Name = "Manually Arise (E x3)",
    Callback = function()
        performArise()
        notify("Manual Action", "Performed arise action.", 2)
    end,
})

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings", 4483362458)

local TPHeightSlider = SettingsTab:CreateSlider({
    Name = "Teleport Height",
    Range = {0, 10},
    Increment = 0.5,
    Suffix = "studs",
    CurrentValue = settings.teleportHeight,
    Flag = "TPHeight",
    Callback = function(Value)
        settings.teleportHeight = Value
    end,
})

local SearchRadiusSlider = SettingsTab:CreateSlider({
    Name = "Search Radius",
    Range = {10, 500},
    Increment = 10,
    Suffix = "studs",
    CurrentValue = settings.targetSearchRadius,
    Flag = "SearchRadius",
    Callback = function(Value)
        settings.targetSearchRadius = Value
    end,
})

local KeybindButton = SettingsTab:CreateKeybind({
    Name = "Toggle Script Keybind",
    CurrentKeybind = "F",
    HoldToInteract = false,
    Flag = "ToggleKeybind",
    Callback = function()
        settings.isRunning = not settings.isRunning
        ToggleButton:Set(settings.isRunning)
        if settings.isRunning then
            startAttackLoop()
        else
            stopAttackLoop()
        end
    end,
})

local DestroyButton = SettingsTab:CreateButton({
    Name = "Destroy UI",
    Callback = function()
        stopAttackLoop()
        Rayfield:Destroy()
    end,
})

-- Initialize enemy check
local function checkInitialEnemies()
    local initialEnemies = findEnemies()
    if #initialEnemies > 0 then
        notify("Enemy Detection", "Found " .. #initialEnemies .. " enemies in the game", 3)
        
        -- Log the first 3 enemies (if there are that many)
        local loggedCount = math.min(3, #initialEnemies)
        local logMessage = "Closest enemies: "
        
        for i = 1, loggedCount do
            if i > 1 then logMessage = logMessage .. ", " end
            logMessage = logMessage .. initialEnemies[i].Name
        end
        
        if #initialEnemies > 3 then
            logMessage = logMessage .. " (+" .. (#initialEnemies - 3) .. " more)"
        end
        
        notify("Enemy Log", logMessage, 5)
    else
        notify("Enemy Detection", "No enemies found in the current area", 3)
    end
end

-- Setup player change detection
Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        -- Update player dropdown
        PlayerTargetDropdown:Refresh(getPlayerNames(), false)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if player ~= LocalPlayer and settings.targetPlayer == player.Name then
        settings.targetPlayer = nil
        PlayerTargetDropdown:Refresh(getPlayerNames(), false)
    end
end)

-- Error handling for critical functions
local function safeStart()
    local success, err = pcall(function()
        -- Check if the required game services are available
        if not workspace:FindFirstChild("__Main") or not workspace.__Main:FindFirstChild("__Enemies") then
            notify("Error", "Game structure not found. This script may not be compatible with this game.", 5)
            return false
        end
        
        -- Check if the player character exists
        if not LocalPlayer.Character then
            notify("Warning", "Player character not found. Please wait for character to load.", 5)
            return false
        end
        
        -- Check if the ReplicatedStorage remotes exist
        if not ReplicatedStorage:FindFirstChild("BridgeNet2") then
            notify("Error", "Required remotes not found. Script may not function properly.", 5)
            return false
        end
        
        -- Initialize the UI
        checkInitialEnemies()
        notify("Auza Hub", "Script loaded successfully!", 3)
        return true
    end)
    
    if not success then
        notify("Critical Error", "Failed to initialize script: " .. tostring(err), 10)
        return false
    end
    
    return true
end

-- Initialize the script
local function initialize()
    -- Setup watch for character respawn
    if not LocalPlayer.Character then
        LocalPlayer.CharacterAdded:Wait()
    end
    
    -- Initialize the player dropdown
    PlayerTargetDropdown:Refresh(getPlayerNames(), true)
    
    -- Add a check for the game structure
    local gameStructureCheck = RunService.Heartbeat:Connect(function()
        if not ENEMIES_FOLDER or not ENEMIES_FOLDER:IsDescendantOf(game) then
            -- Try to find the enemies folder again
            ENEMIES_FOLDER = workspace:FindFirstChild("__Main") and 
                            workspace.__Main:FindFirstChild("__Enemies") and 
                            workspace.__Main.__Enemies:FindFirstChild("Client")
            
            if not ENEMIES_FOLDER and settings.isRunning then
                notify("Warning", "Enemies folder not found. Autofarm may not work properly.", 3)
                settings.isRunning = false
                ToggleButton:Set(false)
                if attackConnection then
                    stopAttackLoop()
                end
            end
        end
    end)
    
    -- Character respawn detector
    LocalPlayer.CharacterAdded:Connect(function(newCharacter)
        if settings.isRunning then
            notify("Character Reset", "Character respawned. Waiting for HumanoidRootPart to load...", 3)
            newCharacter:WaitForChild("HumanoidRootPart")
            wait(1) -- Wait a bit to ensure everything loads
            notify("Character Reset", "Character loaded. Resuming autofarm.", 3)
        end
    end)
    
    -- Create cleanup function
    local function cleanup()
        if gameStructureCheck then
            gameStructureCheck:Disconnect()
        end
        if attackConnection then
            stopAttackLoop()
        end
    end
    
    -- Register cleanup on script termination
    Rayfield.Flags.RegistryDestroyingSignal = function()
        cleanup()
    end
end

-- Create additional tab with debug info
local DebugTab = Window:CreateTab("Debug", 4483362458)

local EnemyCountLabel = DebugTab:CreateLabel("Enemies Found: Checking...")
local LastTargetLabel = DebugTab:CreateLabel("Last Target: None")
local HealthLabel = DebugTab:CreateLabel("Target Health: N/A")

-- Debug update function
local function updateDebugInfo()
    local enemies = findEnemies()
    EnemyCountLabel:Set("Enemies Found: " .. #enemies)
    
    if settings.lastTarget and settings.lastTarget:FindFirstChild("Humanoid") then
        LastTargetLabel:Set("Last Target: " .. settings.lastTarget.Name)
        HealthLabel:Set("Target Health: " .. math.floor(settings.lastTarget.Humanoid.Health) .. "/" .. math.floor(settings.lastTarget.Humanoid.MaxHealth))
    else
        LastTargetLabel:Set("Last Target: None")
        HealthLabel:Set("Target Health: N/A")
    end
end

-- Add debug update loop
local debugUpdateConnection = RunService.Heartbeat:Connect(function()
    if not settings.isRunning then return end
    
    -- Update debug info every second
    if tick() % 1 < 0.1 then
        updateDebugInfo()
    end
end)

-- Create test button
local TestTeleportButton = DebugTab:CreateButton({
    Name = "Test Teleport",
    Callback = function()
        local enemy = findTargetEnemy()
        if enemy then
            notify("Test", "Teleporting to " .. enemy.Name, 2)
            smartTeleport(enemy.HumanoidRootPart.CFrame)
        else
            notify("Test", "No target found", 2)
        end
    end,
})

local TestAttackButton = DebugTab:CreateButton({
    Name = "Test Attack",
    Callback = function()
        local enemy = findTargetEnemy()
        if enemy then
            notify("Test", "Attacking " .. enemy.Name, 2)
            attackEnemy(enemy)
        else
            notify("Test", "No target found", 2)
        end
    end,
})

-- Run the script
if safeStart() then
    initialize()
    notify("Ready", "Script initialized and ready to use!", 3)
else
    wait(5)
    Rayfield:Destroy()
end

-- Prevent script from running multiple times
if _G.AuzaHubLoaded then
    notify("Already Running", "Auza Hub is already running!", 3)
    return
else
    _G.AuzaHubLoaded = true
end

-- Add credits
local CreditsTab = Window:CreateTab("Credits", 4483362458)

CreditsTab:CreateLabel("Auza Hub - Advanced Combat Script")
CreditsTab:CreateLabel("Created by Auza Team")
CreditsTab:CreateLabel("Version 1.1.0")

CreditsTab:CreateButton({
    Name = "Copy Discord Invite",
    Callback = function()
        setclipboard("https://discord.gg/auzahub")
        notify("Discord", "Discord invite copied to clipboard!", 3)
    end,
})

-- Log successful load
notify("Auza Hub", "Script loaded successfully!", 5)
print("Auza Hub - Advanced Combat Script loaded successfully!")
