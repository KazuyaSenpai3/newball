local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Path to enemies folder
local ENEMIES_FOLDER = workspace.__Main.__Enemies.Client

-- Settings
local settings = {
    isRunning = false,
    teleportHeight = 5, -- Increased height to position above heads
    attackDelay = 0.2, -- Normal attack delay
    teleportMethod = "CFrame", -- "CFrame" or "Tween"
    targetSearchRadius = 100,
    useSmartTP = true,
    selectedEnemy = "Nearest", -- "Nearest", "Strongest", "Weakest", "Player"
    targetPlayer = nil, -- For player targeting
    autoArise = true, -- Auto arise after kill
    lastTarget = nil -- Track last target for kill detection
}

-- Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create window
local Window = Rayfield:CreateWindow({
    Name = "Auza Hub",
    LoadingTitle = "Auza Hub - Advanced Combat Script",
    LoadingSubtitle = "by Auza Team",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AuzaHubConfig",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },
    KeySystem = false
})

-- Utility functions
local function notify(title, content, duration)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = duration or 3,
        Image = 4483362458
    })
end

-- Get unique ID for enemy
local function getEnemyID(enemy)
    if enemy and enemy:IsA("Model") then
        return enemy:GetAttribute("ID") or enemy.Name
    end
    return nil
end

-- Check if character is valid
local function isValidCharacter(char)
    return char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid")
end

-- Check if enemy is valid
local function isValidEnemy(enemy)
    return enemy and enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChild("Humanoid")
end

-- Enemy detection functions
local function findEnemies()
    local enemies = {}
    
    -- Check if the folder exists
    if not ENEMIES_FOLDER then
        warn("Enemy folder not found!")
        return enemies
    end
    
    -- Get all valid enemies from the folder
    for _, enemy in pairs(ENEMIES_FOLDER:GetChildren()) do
        if isValidEnemy(enemy) then
            table.insert(enemies, enemy)
        end
    end
    
    return enemies
end

local function findTargetEnemy()
    -- If targeting a player, prioritize that
    if settings.selectedEnemy == "Player" and settings.targetPlayer then
        local targetPlayer = Players:FindFirstChild(settings.targetPlayer)
        if targetPlayer and isValidCharacter(targetPlayer.Character) then
            return targetPlayer.Character
        end
    end
    
    local enemies = findEnemies()
    if #enemies == 0 then
        return nil
    end
    
    -- Different targeting methods
    if settings.selectedEnemy == "Nearest" then
        local nearestEnemy = nil
        local shortestDistance = settings.targetSearchRadius
        local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                              LocalPlayer.Character.HumanoidRootPart.Position
        
        if not playerPosition then return nil end
        
        for _, enemy in pairs(enemies) do
            local distance = (enemy.HumanoidRootPart.Position - playerPosition).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestEnemy = enemy
            end
        end
        
        return nearestEnemy
    elseif settings.selectedEnemy == "Strongest" then
        -- Sort by health (highest first)
        table.sort(enemies, function(a, b)
            return a.Humanoid.Health > b.Humanoid.Health
        end)
        
        return enemies[1]
    elseif settings.selectedEnemy == "Weakest" then
        -- Sort by health (lowest first)
        table.sort(enemies, function(a, b)
            return a.Humanoid.Health < b.Humanoid.Health
        end)
        
        return enemies[1]
    end
    
    -- Default to nearest if no valid selection
    return enemies[1]
end

-- Teleport functions
local function teleportToEnemy(enemy)
    local character = LocalPlayer.Character
    if not isValidCharacter(character) or not isValidEnemy(enemy) then return end
    
    local enemyHead = enemy:FindFirstChild("Head") or enemy.HumanoidRootPart
    local targetPosition = enemyHead.Position + Vector3.new(0, settings.teleportHeight, 0)
    local targetCFrame = CFrame.new(targetPosition, enemyHead.Position) -- Look down at enemy
    
    if settings.teleportMethod == "CFrame" then
        -- Direct CFrame with optional randomization
        if settings.useSmartTP then
            -- Add slight randomization to avoid detection
            local randomOffset = Vector3.new(
                math.random(-10, 10) / 100,
                math.random(-5, 5) / 100,
                math.random(-10, 10) / 100
            )
            character.HumanoidRootPart.CFrame = targetCFrame * CFrame.new(randomOffset)
        else
            character.HumanoidRootPart.CFrame = targetCFrame
        end
    else
        -- Tween method (smoother)
        local tweenInfo = TweenInfo.new(
            0.2, -- Time
            Enum.EasingStyle.Linear,
            Enum.EasingDirection.Out
        )
        
        local tween = TweenService:Create(character.HumanoidRootPart, tweenInfo, {CFrame = targetCFrame})
        tween:Play()
        tween.Completed:Wait() -- Wait for tween to complete
    end
end

-- Attack function
local function attackEnemy(enemy)
    local enemyID = getEnemyID(enemy)
    if not enemyID then return false end
    
    -- Use the specific remote event for attacking
    ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer({
        {
            ["Event"] = "PunchAttack",
            ["Enemy"] = enemyID
        },
        ""
    })
    
    return true
end

-- Auto arise function
local function performArise()
    for i = 1, 3 do
        -- Simulate pressing E key
        keypress(0x45) -- E key
        wait(0.1)
        keyrelease(0x45)
        wait(0.1)
    end
end

-- Check if target is dead
local function isTargetDead(target)
    if not target then return true end
    
    -- Check if the target has a valid humanoid and if it's dead
    if target:FindFirstChild("Humanoid") then
        return target.Humanoid.Health <= 0
    end
    
    -- If there's no Humanoid, check if the target still exists
    return not target:IsDescendantOf(game)
end

-- Main attack loop
local attackConnection = nil

local function startAttackLoop()
    if attackConnection then return end
    
    notify("Auza Hub", "Autofarm activated successfully!", 3)
    
    attackConnection = RunService.Heartbeat:Connect(function()
        if not settings.isRunning then return end
        
        local character = LocalPlayer.Character
        if not isValidCharacter(character) then return end
        
        -- Check if previous target is dead
        if settings.lastTarget and isTargetDead(settings.lastTarget) then
            if settings.autoArise then
                performArise()
            end
            settings.lastTarget = nil
            wait(0.5) -- Brief delay after kill
        end
        
        local enemy = findTargetEnemy()
        if enemy then
            -- Update last target
            settings.lastTarget = enemy
            
            -- Teleport above enemy head
            teleportToEnemy(enemy)
            
            -- Normal attack
            attackEnemy(enemy)
            
            -- Wait for attack delay
            wait(settings.attackDelay)
        else
            -- No enemies found, wait a bit before checking again
            wait(0.2)
        end
    end)
end

local function stopAttackLoop()
    if attackConnection then
        attackConnection:Disconnect()
        attackConnection = nil
        notify("Auza Hub", "Autofarm deactivated.", 3)
    end
end

-- Create UI elements
local MainTab = Window:CreateTab("Main", 4483362458)

local ToggleButton = MainTab:CreateToggle({
    Name = "Enable Autofarm",
    CurrentValue = false,
    Flag = "AutofarmEnabled",
    Callback = function(Value)
        settings.isRunning = Value
        if Value then
            startAttackLoop()
        else
            stopAttackLoop()
        end
    end,
})

local TeleportMethodDropdown = MainTab:CreateDropdown({
    Name = "Teleport Method",
    Options = {"CFrame", "Tween"},
    CurrentOption = settings.teleportMethod,
    Flag = "TPMethod",
    Callback = function(Option)
        settings.teleportMethod = Option
        notify("Settings Changed", "Teleport method set to: " .. Option, 2)
    end,
})

local SmartTPToggle = MainTab:CreateToggle({
    Name = "Smart Teleport",
    CurrentValue = settings.useSmartTP,
    Flag = "SmartTP",
    Callback = function(Value)
        settings.useSmartTP = Value
    end,
})

local TargetingDropdown = MainTab:CreateDropdown({
    Name = "Target Selection",
    Options = {"Nearest", "Strongest", "Weakest", "Player"},
    CurrentOption = settings.selectedEnemy,
    Flag = "TargetSelection",
    Callback = function(Option)
        settings.selectedEnemy = Option
        notify("Settings Changed", "Target selection set to: " .. Option, 2)
    end,
})

-- Get player list for targeting
local function getPlayerNames()
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

local PlayerTargetDropdown = MainTab:CreateDropdown({
    Name = "Select Player Target",
    Options = getPlayerNames(),
    CurrentOption = "",
    Flag = "PlayerTarget",
    Callback = function(Option)
        settings.targetPlayer = Option
        notify("Target Selected", "Now targeting player: " .. Option, 2)
    end,
})

-- Refresh player list button
local RefreshPlayersButton = MainTab:CreateButton({
    Name = "Refresh Player List",
    Callback = function()
        PlayerTargetDropdown:Refresh(getPlayerNames(), true)
        notify("Players Refreshed", "Player list has been updated.", 2)
    end,
})

-- Combat Tab
local CombatTab = Window:CreateTab("Combat", 4483362458)

local AttackDelaySlider = CombatTab:CreateSlider({
    Name = "Attack Delay",
    Range = {0.1, 1.0},
    Increment = 0.05,
    Suffix = "seconds",
    CurrentValue = settings.attackDelay,
    Flag = "AttackDelay",
    Callback = function(Value)
        settings.attackDelay = Value
    end,
})

local AutoAriseToggle = CombatTab:CreateToggle({
    Name = "Auto Arise After Kill",
    CurrentValue = settings.autoArise,
    Flag = "AutoArise",
    Callback = function(Value)
        settings.autoArise = Value
    end,
})

local ManualAriseButton = CombatTab:CreateButton({
    Name = "Manually Arise (E x3)",
    Callback = function()
        performArise()
        notify("Manual Action", "Performed arise action.", 2)
    end,
})

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings", 4483362458)

local TPHeightSlider = SettingsTab:CreateSlider({
    Name = "Teleport Height",
    Range = {1, 10},
    Increment = 0.5,
    Suffix = "studs",
    CurrentValue = settings.teleportHeight,
    Flag = "TPHeight",
    Callback = function(Value)
        settings.teleportHeight = Value
    end,
})

local SearchRadiusSlider = SettingsTab:CreateSlider({
    Name = "Search Radius",
    Range = {10, 500},
    Increment = 10,
    Suffix = "studs",
    CurrentValue = settings.targetSearchRadius,
    Flag = "SearchRadius",
    Callback = function(Value)
        settings.targetSearchRadius = Value
    end,
})

local KeybindButton = SettingsTab:CreateKeybind({
    Name = "Toggle Script Keybind",
    CurrentKeybind = "F",
    HoldToInteract = false,
    Flag = "ToggleKeybind",
    Callback = function()
        settings.isRunning = not settings.isRunning
        ToggleButton:Set(settings.isRunning)
        if settings.isRunning then
            startAttackLoop()
        else
            stopAttackLoop()
        end
    end,
})

local DestroyButton = SettingsTab:CreateButton({
    Name = "Destroy UI",
    Callback = function()
        stopAttackLoop()
        Rayfield:Destroy()
    end,
})

-- Initialize enemy check
local function checkInitialEnemies()
    local initialEnemies = findEnemies()
    if #initialEnemies > 0 then
        notify("Enemy Detection", "Found " .. #initialEnemies .. " enemies in the game", 3)
        
        -- Log the first 3 enemies (if there are that many)
        local loggedCount = math.min(3, #initialEnemies)
        local logMessage = "Closest enemies: "
        
        for i = 1, loggedCount do
            if i > 1 then logMessage = logMessage .. ", " end
            logMessage = logMessage .. initialEnemies[i].Name
        end
        
        if #initialEnemies > 3 then
            logMessage = logMessage .. " (+" .. (#initialEnemies - 3) .. " more)"
        end
        
        notify("Enemy Log", logMessage, 5)
    else
        notify("Enemy Detection", "No enemies found in the current area", 3)
    end
end

-- Setup player change detection
Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        -- Update player dropdown
        PlayerTargetDropdown:Refresh(getPlayerNames(), false)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if player ~= LocalPlayer and settings.targetPlayer == player.Name then
        settings.targetPlayer = nil
        PlayerTargetDropdown:Refresh(getPlayerNames(), false)
    end
end)

-- Error handling for critical functions
    local function safeStart()
        local success, error = pcall(function()
            checkInitialEnemies()
        end)
        
        if not success then
            notify("Error", "Failed to initialize enemy detection: " .. tostring(error), 5)
        end
        
        -- Check for game compatibility
        if not ReplicatedStorage:FindFirstChild("BridgeNet2") then
            notify("Warning", "This game may not be compatible with Auza Hub. Some features might not work.", 5)
        end
    end
    
    -- Handle remote event errors
    local function safeSendRemote(...)
        local success, error = pcall(function(...)
            ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(...)
        end, ...)
        
        return success
    end
    
    -- Monitor for game changes that might break the script
    local gameMonitor = RunService.Heartbeat:Connect(function()
        if not ENEMIES_FOLDER or not ENEMIES_FOLDER:IsDescendantOf(workspace) then
            -- Try to relocate enemies folder if it changes
            local newPath = workspace:FindFirstChild("__Main")
            if newPath and newPath:FindFirstChild("__Enemies") and newPath.__Enemies:FindFirstChild("Client") then
                ENEMIES_FOLDER = newPath.__Enemies.Client
                notify("Path Updated", "Enemy folder path has been updated", 3)
            end
        end
    end)
    
    -- Clean up function when script is terminated
    local function cleanUp()
        if attackConnection then attackConnection:Disconnect() end
        if gameMonitor then gameMonitor:Disconnect() end
        
        -- Reset character state if needed
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        end
    end
    
    -- Credit tab
    local CreditsTab = Window:CreateTab("Credits", 4483362458)
    
    CreditsTab:CreateSection("Auza Hub")
    
    CreditsTab:CreateParagraph({
        Title = "About Auza Hub",
        Content = "Auza Hub is an advanced combat & farming utility for this game. Created with efficiency and stability in mind."
    })
    
    CreditsTab:CreateParagraph({
        Title = "Version",
        Content = "v1.0.0 - Initial Release"
    })
    
    -- Add a simple animation to make the UI feel more premium
    local function animateUI()
        for _, tab in pairs(Window.Tabs) do
            for _, element in pairs(tab.Elements) do
                if element.ElementInstance then
                    local originalTransparency = element.ElementInstance.BackgroundTransparency
                    element.ElementInstance.BackgroundTransparency = 1
                    
                    local tween = TweenService:Create(
                        element.ElementInstance, 
                        TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {BackgroundTransparency = originalTransparency}
                    )
                    tween:Play()
                    wait(0.05)
                end
            end
        end
    end
    
    -- Information about game detection
    local function detectGameInfo()
        local gameInfo = {
            name = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
            placeId = game.PlaceId,
            jobId = game.JobId
        }
        
        -- Add game info to Credits tab
        CreditsTab:CreateParagraph({
            Title = "Game Info",
            Content = "Game: " .. gameInfo.name .. "\nPlace ID: " .. gameInfo.placeId .. "\nServer ID: " .. gameInfo.jobId
        })
        
        return gameInfo
    end
    
    -- Performance optimization
    local function optimizePerformance()
        -- Reduce render distance for better performance during farming
        local oldRenderDistance
        
        -- Toggle for performance mode
        local PerformanceToggle = SettingsTab:CreateToggle({
            Name = "Performance Mode",
            CurrentValue = false,
            Flag = "PerformanceMode",
            Callback = function(Value)
                if Value then
                    -- Store original value
                    oldRenderDistance = UserSettings().GameSettings.SavedQualityLevel
                    
                    -- Reduce graphics quality
                    settings().Rendering.QualityLevel = 1
                    UserSettings().GameSettings.SavedQualityLevel = 1
                    
                    notify("Performance", "Performance mode enabled", 2)
                else
                    -- Restore original value
                    if oldRenderDistance then
                        settings().Rendering.QualityLevel = oldRenderDistance
                        UserSettings().GameSettings.SavedQualityLevel = oldRenderDistance
                    end
                    
                    notify("Performance", "Performance mode disabled", 2)
                end
            end,
        })
    end
    
    -- Anti-AFK functionality
    local function setupAntiAFK()
        local AntiAFKToggle = SettingsTab:CreateToggle({
            Name = "Anti-AFK",
            CurrentValue = true,
            Flag = "AntiAFK",
            Callback = function(Value)
                if Value then
                    -- Connect anti-AFK
                    local VirtualUser = game:GetService("VirtualUser")
                    LocalPlayer.Idled:Connect(function()
                        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                        wait(1)
                        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    end)
                    notify("Anti-AFK", "Anti-AFK system activated", 2)
                end
            end,
        })
        
        -- Enable by default
        AntiAFKToggle:Set(true)
    end
    
    -- Server hop functionality
    local function setupServerHop()
        local ServerHopButton = SettingsTab:CreateButton({
            Name = "Server Hop",
            Callback = function()
                notify("Server", "Finding a new server...", 3)
                
                local success, errorMsg = pcall(function()
                    local TeleportService = game:GetService("TeleportService")
                    local HttpService = game:GetService("HttpService")
                    local servers = {}
                    
                    local req = request({
                        Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                    })
                    
                    local body = HttpService:JSONDecode(req.Body)
                    
                    if body and body.data then
                        for _, server in pairs(body.data) do
                            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                                table.insert(servers, server.id)
                            end
                        end
                        
                        if #servers > 0 then
                            TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
                        else
                            notify("Server", "No suitable servers found", 3)
                        end
                    end
                end)
                
                if not success then
                    notify("Error", "Server hop failed: " .. tostring(errorMsg), 3)
                end
            end,
        })
    end
    
    -- Initialize all components
    safeStart()
    animateUI()
    detectGameInfo()
    optimizePerformance()
    setupAntiAFK()
    setupServerHop()
    
    -- Initial welcome message
    notify("Auza Hub", "Successfully loaded! Press " .. KeybindButton.KeybindText.Text .. " to toggle autofarm or use the UI button.", 5)
    
    -- Handle script shutdown
    game:BindToClose(function()
        cleanUp()
    end)
